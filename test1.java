import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.w3c.dom.Text;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author nikhi
 */
public class test1 extends javax.swing.JFrame {

    /**
     * Creates new form test1
     */
    static String fs;
    static long ti;
    static long si;
    static long bi;
    static long qi;
    static long mi;
 
    public test1(String filename) {
        fs = filename;
      
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        analysisbutton = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Insertion Sort");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Selection Sort");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Bubble Sort");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Quick Sort");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Merge Sort");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        analysisbutton.setText("Analysis");
        analysisbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(analysisbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(analysisbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(jButton4)
                .addGap(18, 18, 18)
                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            
        PrintWriter pw = null;
        try {
            String s = "";
            String name = "";
            String eno = "";
            String salary = "";
            String joiningdate = "";
            String age = "";
            Map<String,linkedlist> m = new HashMap<>();
            ArrayList<Integer> l = new ArrayList<>();
            try {
                BufferedReader   br = new BufferedReader(new FileReader(fs));
                while((s = br.readLine())!=null)
                {
                    String[] result = s.split("\\|");
                    name = result[0];
                    eno = result[1];
                    salary = result[2];
                    joiningdate= result[3];
                    age= result[4];
                    
                    linkedlist head = putinlinkedlist(name,eno,salary,joiningdate,age);
                    m.put(eno, head);
                    int usn1 = Integer.parseInt(eno);
                    if(l.contains(usn1)==false){
                        l.add(usn1);
                    }
                    
                    
                    
                }       } catch (IOException ex) {
                    Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
                }
            int arr[] = new int[l.size()];
            for(int i=0;i<l.size();i++){
                arr[i] = l.get(i);
            }
            long startTime = System.nanoTime();
            int n = arr.length;
            for (int i = 1; i < n; ++i) {
                int key = arr[i];
                int j = i - 1;
                
                
                while (j >= 0 && arr[j] > key) {
                    arr[j + 1] = arr[j];
                    j = j - 1;
                }
                arr[j + 1] = key;
            }
            long endTime = System.nanoTime();
            long time = endTime - startTime;
            String msg = Long.toString(time);
            ti = time;
            File file = new File("D:\\Insertionsort.txt");
            pw = new PrintWriter(file);
            for(int i=0;i<arr.length;i++){
                linkedlist head = m.get(Integer.toString(arr[i]));
                String data = getdata(head);
                pw.println(data);
            }
             JOptionPane.showMessageDialog(null, msg);
                setVisible(true);
 } catch (FileNotFoundException ex) {
            Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
        
       
    
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         PrintWriter pw = null;
        try {
            String s = "";
            String name = "";
            String eno = "";
            String salary = "";
            String joiningdate = "";
            String age = "";
            Map<String,linkedlist> m = new HashMap<>();
            ArrayList<Integer> l = new ArrayList<>();
            try {
                BufferedReader   br = new BufferedReader(new FileReader(fs));
                while((s = br.readLine())!=null)
                {
                    String[] result = s.split("\\|");
                    name = result[0];
                    eno = result[1];
                    salary = result[2];
                    joiningdate= result[3];
                    age= result[4];
                    
                    linkedlist head = putinlinkedlist(name,eno,salary,joiningdate,age);
                    m.put(eno, head);
                    int usn1 = Integer.parseInt(eno);
                    if(l.contains(usn1)==false){
                        l.add(usn1);
                    }
                    
                    
                    
                }       } catch (IOException ex) {
                    Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
                }
            int arr[] = new int[l.size()];
            for(int i=0;i<l.size();i++){
                arr[i] = l.get(i);
            }
            long startTime = System.nanoTime();
            int n  = arr.length;
        for (int i = 0; i < n-1; i++)
        {
            
            int min_idx = i;
            for (int j = i+1; j < n; j++)
                if (arr[j] < arr[min_idx])
                    min_idx = j;
 
            
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }

            
            long endTime = System.nanoTime();
            long time = endTime - startTime;
            si = time;
            String msg = Long.toString(time);
            File file = new File("D:\\selectionsort.txt");
            pw = new PrintWriter(file);
            for(int i=0;i<arr.length;i++){
                linkedlist head = m.get(Integer.toString(arr[i]));
                String data = getdata(head);
                pw.println(data);
            }
             JOptionPane.showMessageDialog(null, msg);
                setVisible(true);
 } catch (FileNotFoundException ex) {
            Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
        
       
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        PrintWriter pw = null;
        try {
            String s = "";
            String name = "";
            String eno = "";
            String salary = "";
            String joiningdate = "";
            String age = "";
            Map<String,linkedlist> m = new HashMap<>();
            ArrayList<Integer> l = new ArrayList<>();
            try {
                BufferedReader   br = new BufferedReader(new FileReader(fs));
                while((s = br.readLine())!=null)
                {
                    String[] result = s.split("\\|");
                    name = result[0];
                    eno = result[1];
                    salary = result[2];
                    joiningdate= result[3];
                    age= result[4];
                    
                    linkedlist head = putinlinkedlist(name,eno,salary,joiningdate,age);
                    m.put(eno, head);
                    int usn1 = Integer.parseInt(eno);
                    if(l.contains(usn1)==false){
                        l.add(usn1);
                    }
                    
                    
                    
                }       } catch (IOException ex) {
                    Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
                }
            int arr[] = new int[l.size()];
            for(int i=0;i<l.size();i++){
                arr[i] = l.get(i);
            }
            long startTime = System.nanoTime();
         int n = arr.length;
        for (int i = 0; i < n-1; i++){
            for (int j = 0; j < n-i-1; j++){
                if (arr[j] > arr[j+1])
                {
                    
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }


            
            long endTime = System.nanoTime();
            long time = endTime - startTime;
            bi = time;
            String msg = Long.toString(time);
            File file = new File("D:\\bubblesort.txt");
            pw = new PrintWriter(file);
            for(int i=0;i<arr.length;i++){
                linkedlist head = m.get(Integer.toString(arr[i]));
                String data = getdata(head);
                pw.println(data);
            }
             JOptionPane.showMessageDialog(null, msg);
                setVisible(true);
 } catch (FileNotFoundException ex) {
            Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
        
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
           PrintWriter pw = null;
        try {
            String s = "";
            String name = "";
            String eno = "";
            String salary = "";
            String joiningdate = "";
            String age = "";
            Map<String,linkedlist> m = new HashMap<>();
            ArrayList<Integer> l = new ArrayList<>();
            try {
                BufferedReader   br = new BufferedReader(new FileReader(fs));
                while((s = br.readLine())!=null)
                {
                    String[] result = s.split("\\|");
                    name = result[0];
                    eno = result[1];
                    salary = result[2];
                    joiningdate= result[3];
                    age= result[4];
                    
                    linkedlist head = putinlinkedlist(name,eno,salary,joiningdate,age);
                    m.put(eno, head);
                    int usn1 = Integer.parseInt(eno);
                    if(l.contains(usn1)==false){
                        l.add(usn1);
                    }
                    
                    
                    
                }       } catch (IOException ex) {
                    Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
                }
            int arr[] = new int[l.size()];
            for(int i=0;i<l.size();i++){
                arr[i] = l.get(i);
            }
            long startTime = System.nanoTime();
            
               quickSort(arr,0,arr.length-1);
            
            long endTime = System.nanoTime();
            long time = endTime - startTime;
            qi = time;
            String msg = Long.toString(time);
            File file = new File("D:\\quicksort.txt");
            pw = new PrintWriter(file);
            for(int i=0;i<arr.length;i++){
                linkedlist head = m.get(Integer.toString(arr[i]));
                String data = getdata(head);
                pw.println(data);
            }
             JOptionPane.showMessageDialog(null, msg);
                setVisible(true);
 } catch (FileNotFoundException ex) {
            Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       PrintWriter pw = null;
        try {
            String s = "";
            String name = "";
            String eno = "";
            String salary = "";
            String joiningdate = "";
            String age = "";
            Map<String,linkedlist> m = new HashMap<>();
            ArrayList<Integer> l = new ArrayList<>();
            try {
                BufferedReader   br = new BufferedReader(new FileReader(fs));
                while((s = br.readLine())!=null)
                {
                    String[] result = s.split("\\|");
                    name = result[0];
                    eno = result[1];
                    salary = result[2];
                    joiningdate= result[3];
                    age= result[4];
                    
                    linkedlist head = putinlinkedlist(name,eno,salary,joiningdate,age);
                    m.put(eno, head);
                    int usn1 = Integer.parseInt(eno);
                    if(l.contains(usn1)==false){
                        l.add(usn1);
                    }
                    
                    
                    
                }       } catch (IOException ex) {
                    Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
                }
            int arr[] = new int[l.size()];
            for(int i=0;i<l.size();i++){
                arr[i] = l.get(i);
            }
            long startTime = System.nanoTime();
        

            mergesort(arr,0,arr.length-1);
            
            long endTime = System.nanoTime();
            long time = endTime - startTime;
            String msg = Long.toString(time);
            mi = time;
            File file = new File("D:\\mergesort.txt");
            pw = new PrintWriter(file);
            for(int i=0;i<arr.length;i++){
                linkedlist head = m.get(Integer.toString(arr[i]));
                String data = getdata(head);
                pw.println(data);
            }
             JOptionPane.showMessageDialog(null, msg);
                setVisible(true);
 } catch (FileNotFoundException ex) {
            Logger.getLogger(test1.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void analysisbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisbuttonActionPerformed
         
   new analysis(ti,si,bi,qi,mi).setVisible(true);
       


    }//GEN-LAST:event_analysisbuttonActionPerformed

  public void quickSort(int[] arr, int low, int high)
{
    if (low < high)
    {
         
       
        int pi = partition(arr, low, high);
 
       
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
  public int partition(int[] arr, int low, int high)
{
     
    
    int pivot = arr[high];
     
    
    int i = (low - 1);
 
    for(int j = low; j <= high - 1; j++)
    {
         
        
        if (arr[j] < pivot)
        {
             
            
            i++;
            swap(arr, i, j);
        }
    }
    swap(arr, i + 1, high);
    return (i + 1);
}
  public void swap(int[] arr, int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}
  void mergesort(int arr[], int l, int r)
    {
        if (l < r) {
         
            int m =l+ (r-l)/2;
 
           
            mergesort(arr, l, m);
            mergesort(arr, m + 1, r);
 
            
            merge(arr, l, m, r);
        }
    }
  void merge(int arr[], int l, int m, int r)
    {
        
        int n1 = m - l + 1;
        int n2 = r - m;
 
                int L[] = new int[n1];
        int R[] = new int[n2];
 
               for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
 
      
 
        
        int i = 0, j = 0;
 
       
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            }
            else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
 
        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
 
        
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
  
  private linkedlist putinlinkedlist(String name, String eno,String salary,String joiningdate,String age) {
        linkedlist head = new linkedlist(eno);
        linkedlist node1 = new linkedlist(name);
        head.next = node1;
        linkedlist node2 = new linkedlist(salary);
        node1.next = node2;
        linkedlist node3 = new linkedlist(joiningdate);
        node2.next = node3;
        linkedlist node4 = new linkedlist(age);
        node3.next = node4;
        return head;
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analysisbutton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JDialog jDialog1;
    // End of variables declaration//GEN-END:variables

    private String getdata(linkedlist head) {
       
       String ans = "";
       linkedlist temp = head;
       while(temp!=null){
       ans = ans + temp.data+" ";
       temp = temp.next;
       }
       return ans;
    }
}
class linkedlist{
String data;
linkedlist next;

linkedlist(String data){
this.data = data;
next=null;
}


}
